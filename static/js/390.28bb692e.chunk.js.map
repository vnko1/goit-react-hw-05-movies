{"version":3,"file":"static/js/390.28bb692e.chunk.js","mappings":"8LAiDA,UA7Ca,WACX,IAAQA,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAAS,CAAEC,YAAY,SAAD,OAAWT,EAAX,YAA+BM,WAAAA,GAQ3D,OAPAI,EAAAA,EAAAA,IAAYF,GACTG,MAAK,SAAAC,GACJR,GAAQS,EAAAA,EAAAA,IAAcD,EAAST,MAChC,IACAW,OAAM,SAAAC,GAAW,IACjBC,SAAQ,WAAQ,IAEZ,WACLV,EAAWW,OACZ,CACF,GAAE,CAACjB,KAGF,kCACKG,EAAKe,SACN,wBACGf,EAAKgB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,cAAeC,EAA5B,EAA4BA,UAAWC,EAAvC,EAAuCA,aAAvC,OACR,2BACE,gBACEC,IACED,EAAY,0CAC2BA,GACnC,kCAENE,IAAKL,EACLM,MAAM,QAER,uBAAIL,KACJ,uCAAeC,OAXRH,EADD,OAiBZjB,EAAKe,SAAU,mEAGtB,C,+LC3CDU,EAAAA,EAAAA,SAAAA,QAFiB,gCAIV,IAAMlB,EAAW,mCAAG,oGACzBD,EADyB,EACzBA,YADyB,IAEzBoB,MAAAA,OAFyB,MAEjB,KAFiB,EAGzBvB,EAHyB,EAGzBA,WAHyB,UAKFsB,EAAAA,EAAAA,GAAMnB,EAAa,CACxCqB,OAAQxB,EAAWwB,OACnBtB,OAAQ,CAAEuB,QAZE,mCAYgBF,MAAAA,KAPL,cAKnBjB,EALmB,yBASlBA,EAASoB,MATS,2CAAH,sDCNXC,EAAkB,SAAAC,GAAM,OACnCA,EAAOf,KAAI,kBAAoB,CAAEgB,MAAtB,EAAGA,MAA0Bf,GAA7B,EAAUA,GAAV,GADwB,EAGxBgB,EAAiB,SAAC,GAUxB,IATLC,EASI,EATJA,aACAF,EAQI,EARJA,MACAG,EAOI,EAPJA,YACAC,EAMI,EANJA,WACAC,EAKI,EALJA,cACApB,EAII,EAJJA,GACAqB,EAGI,EAHJA,QACAC,EAEI,EAFJA,OACAC,EACI,EADJA,SAEMC,EAAOP,EAAaQ,MAAM,KAE1BC,EAAYJ,EAAOvB,KAAI,SAAA4B,GAAK,OAAIA,EAAM1B,IAAV,IAAgB2B,KAAK,KACvD,MAAO,CACLJ,KAAMA,EAAK,GACXT,MAAAA,EACAM,QAAAA,EACArB,GAAAA,EACAkB,YAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAM,UAAAA,EACAH,SAAAA,EAEH,EAEY9B,EAAgB,SAAAV,GAAI,OAC/BA,EAAKgB,KAAI,kBAA2D,CAClEC,GADO,EAAGA,GAEVC,KAFO,EAAOA,KAGdC,cAHO,EAAaA,cAIpBC,UAJO,EAA4BA,UAKnCC,aALO,EAAuCA,aAAvC,GADsB,EASpByB,EAAkB,SAAAC,GAAO,OACpCA,EAAQ/B,KAAI,kBAA8B,CAAEgC,OAAhC,EAAGA,OAAqCC,QAAxC,EAAWA,QAAsChC,GAAjD,EAAoBA,GAApB,GADwB,C","sources":["components/cast/Cast.jsx","services/API.js","services/funcs.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchMovies, normalizeCast } from 'services';\n\nconst Cast = () => {\n  const { moviesId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const params = { fetchParams: `movie/${moviesId}/credits`, controller };\n    fetchMovies(params)\n      .then(response => {\n        setCast(normalizeCast(response.cast));\n      })\n      .catch(error => {})\n      .finally(() => {});\n\n    return () => {\n      controller.abort();\n    };\n  }, [moviesId]);\n\n  return (\n    <>\n      {!!cast.length && (\n        <ul>\n          {cast.map(({ id, name, original_name, character, profile_path }) => (\n            <li key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                    : 'https://placehold.co/80x100/png'\n                }\n                alt={name}\n                width=\"80\"\n              />\n              <p>{original_name}</p>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {!cast.length && <p>We don't have any cast for this movie</p>}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nconst API_KEY = 'c095a52b18be81f1ee1fe016a8531acc';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchMovies = async ({\n  fetchParams,\n  query = null,\n  controller,\n}) => {\n  const response = await axios(fetchParams, {\n    signal: controller.signal,\n    params: { api_key: API_KEY, query },\n  });\n  return response.data;\n};\n","export const normalizeMovies = movies =>\n  movies.map(({ title, id }) => ({ title, id }));\n\nexport const normalizeMovie = ({\n  release_date,\n  title,\n  poster_path,\n  popularity,\n  backdrop_path,\n  id,\n  tagline,\n  genres,\n  overview,\n}) => {\n  const date = release_date.split('-');\n\n  const genreList = genres.map(genre => genre.name).join(' ');\n  return {\n    date: date[0],\n    title,\n    tagline,\n    id,\n    poster_path,\n    popularity,\n    backdrop_path,\n    genreList,\n    overview,\n  };\n};\n\nexport const normalizeCast = cast =>\n  cast.map(({ id, name, original_name, character, profile_path }) => ({\n    id,\n    name,\n    original_name,\n    character,\n    profile_path,\n  }));\n\nexport const normalizeReview = reviews =>\n  reviews.map(({ author, content, id }) => ({ author, content, id }));\n"],"names":["moviesId","useParams","useState","cast","setCast","useEffect","controller","AbortController","params","fetchParams","fetchMovies","then","response","normalizeCast","catch","error","finally","abort","length","map","id","name","original_name","character","profile_path","src","alt","width","axios","query","signal","api_key","data","normalizeMovies","movies","title","normalizeMovie","release_date","poster_path","popularity","backdrop_path","tagline","genres","overview","date","split","genreList","genre","join","normalizeReview","reviews","author","content"],"sourceRoot":""}