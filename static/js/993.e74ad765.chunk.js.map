{"version":3,"file":"static/js/993.e74ad765.chunk.js","mappings":"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","sources":["components/loader/NetflixLoader.jsx","components/movieList/MovieList.styled.js","components/movieList/MoviesList.jsx","components/toast/Toast.jsx","pages/Home.jsx","services/API.js","services/hooks.js","services/funcs.js"],"sourcesContent":["import ContentLoader from 'react-content-loader';\n\nconst NetflixLoader = props => {\n  const rows = 3;\n  const columns = 4;\n  const coverHeight = 450;\n  const coverWidth = 300;\n  const padding = 5;\n  const speed = 1;\n\n  const coverHeightWithPadding = coverHeight + padding;\n  const coverWidthWithPadding = coverWidth + padding;\n  const initial = 35;\n  const covers = Array(columns * rows).fill(1);\n\n  return (\n    <ContentLoader\n      speed={speed}\n      width={columns * coverWidthWithPadding}\n      height={rows * coverHeightWithPadding}\n      {...props}\n    >\n      {covers.map((g, i) => {\n        let vy = Math.floor(i / columns) * coverHeightWithPadding + initial;\n        let vx =\n          (i * coverWidthWithPadding) % (columns * coverWidthWithPadding);\n        return (\n          <rect\n            key={i}\n            x={vx}\n            y={vy}\n            rx=\"0\"\n            ry=\"0\"\n            width={coverWidth}\n            height={coverHeight}\n          />\n        );\n      })}\n    </ContentLoader>\n  );\n};\n\nexport default NetflixLoader;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding-top: 20px;\n`;\n\nexport const Item = styled.li`\n  max-width: 250px;\n  text-align: center;\n`;\n\nexport const NavLink = styled(Link)`\n  color: black;\n  font-size: 16px;\n  font-weight: 500;\n\n  &:hover,\n  &:focus {\n    color: tomato;\n  }\n`;\n\nexport const ImageWrapper = styled.div`\n  position: relative;\n`;\n\nexport const ProgressBarContainer = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n\n  width: 50px;\n`;\n\nconst Canvas = styled(CircularProgressbar)``;\n\nexport const Progressbar = ({ value, text }) => {\n  return (\n    <Canvas\n      value={value}\n      text={text}\n      background\n      backgroundPadding={6}\n      styles={buildStyles({\n        textColor: 'black',\n        pathColor: 'teal',\n        trailColor: 'tomato',\n        backgroundColor: 'silver',\n        textSize: '30px',\n      })}\n    ></Canvas>\n  );\n};\n","import { useLocation } from 'react-router-dom';\nimport PropTypes, { shape } from 'prop-types';\nimport { after } from 'underscore';\nimport {\n  List,\n  Item,\n  ImageWrapper,\n  NavLink,\n  ProgressBarContainer,\n  Progressbar,\n} from './MovieList.styled';\n\nconst MoviesList = ({ movies, setIsLoading }) => {\n  const location = useLocation();\n\n  const onComplete = after(movies.length, () => {\n    setIsLoading(false);\n  });\n\n  return (\n    <List>\n      {movies.map(({ title, id, poster, averageVote }, index) => {\n        return (\n          <Item key={id}>\n            <NavLink to={`/movies/${id}`} state={{ from: location }}>\n              <ImageWrapper>\n                <img\n                  src={poster}\n                  alt={title}\n                  width=\"300px\"\n                  onLoad={onComplete}\n                  onError={onComplete}\n                />\n                <ProgressBarContainer>\n                  <Progressbar value={averageVote} text={`${averageVote}%`} />\n                </ProgressBarContainer>\n              </ImageWrapper>\n              <h2>{title}</h2>\n            </NavLink>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  setIsLoading: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(\n    shape({\n      id: PropTypes.number.isRequired,\n      averageVote: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import { Toaster } from 'react-hot-toast';\n\nconst Message = () => {\n  return <Toaster position=\"top-center\" reverseOrder={false} />;\n};\n\nexport default Message;\n","import { useEffect, useRef } from 'react';\nimport MoviesList from 'components/movieList/MoviesList';\nimport NetflixLoader from 'components/loader/NetflixLoader';\nimport Message from 'components/toast/Toast';\nimport useFetch from 'services/hooks';\n\nconst Home = () => {\n  const { movies, isLoading, setIsLoading, fetchMoviesList } = useFetch();\n  const { current: fetch } = useRef(fetchMoviesList);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    fetch({ fetchParams: 'trending/movie/week', controller });\n    return () => {\n      controller.abort();\n    };\n  }, [fetch]);\n\n  return (\n    <>\n      {isLoading && <NetflixLoader />}\n      {!!movies.length && (\n        <MoviesList\n          movies={movies}\n          isLoading={isLoading}\n          setIsLoading={setIsLoading}\n        />\n      )}\n      <Message />\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\nconst API_KEY = 'c095a52b18be81f1ee1fe016a8531acc';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchMovies = async ({\n  fetchParams,\n  query = null,\n  controller,\n}) => {\n  const response = await axios(fetchParams, {\n    signal: controller.signal,\n    params: { api_key: API_KEY, query },\n  });\n  return response.data;\n};\n","import { useState } from 'react';\nimport { fetchMovies } from './API';\nimport {\n  normalizeMovies,\n  normalizeMovie,\n  normalizeCast,\n  normalizeReview,\n} from './funcs';\nimport toast from 'react-hot-toast';\n\nconst useFetch = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [movie, setMovie] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n\n  const fetchMoviesList = params => {\n    setIsLoading(true);\n    fetchMovies(params)\n      .then(response => {\n        if (!response.results.length) {\n          setIsLoading(false);\n          toast.error('Nothing found!');\n        }\n        const movies = normalizeMovies(response.results);\n\n        setMovies(movies);\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') {\n          setIsLoading(false);\n          toast.error(error.message);\n        }\n      });\n  };\n\n  const fetchMovie = params => {\n    setIsLoading(true);\n    fetchMovies(params)\n      .then(response => {\n        setMovie(normalizeMovie(response));\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') {\n          setIsLoading(false);\n          toast.error(error.message);\n        }\n      });\n  };\n\n  const fetchCast = params => {\n    fetchMovies(params)\n      .then(response => {\n        setCast(normalizeCast(response.cast));\n        if (!response.cast.length)\n          toast.error(\"We don't have any cast for this movie\");\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      });\n  };\n\n  const fetcReviews = params => {\n    fetchMovies(params)\n      .then(response => {\n        setReviews(normalizeReview(response.results));\n        if (!response.results.length)\n          toast.error(\"We don't have any reviews for this movie\");\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      });\n  };\n\n  return {\n    movies,\n    fetchMoviesList,\n    movie,\n    fetchMovie,\n    cast,\n    fetchCast,\n    reviews,\n    fetcReviews,\n    isLoading,\n    setIsLoading,\n  };\n};\n\nexport default useFetch;\n","export const normalizeMovies = movies =>\n  movies.map(({ title, id, poster_path, vote_average }) => {\n    const poster = poster_path\n      ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n      : 'https://placehold.co/500x750/png';\n\n    const averageVote = vote_average && Math.round(vote_average * 10);\n    return { title, id, poster, averageVote };\n  });\n\nexport const normalizeMovie = ({\n  release_date,\n  title,\n  poster_path,\n  popularity,\n  backdrop_path,\n  id,\n  tagline,\n  genres,\n  overview,\n}) => {\n  const date = release_date\n    ? release_date.split('-')[0]\n    : 'No release information';\n\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n    : 'https://placehold.co/500x750/png';\n  const genreList = genres.map(genre => genre.name).join(' ');\n  const genre = genreList.length ? genreList : 'No genre information';\n\n  return {\n    date,\n    title,\n    tagline,\n    id,\n    poster,\n    popularity: popularity + '',\n    backdrop_path,\n    genre,\n    overview,\n  };\n};\n\nexport const normalizeCast = cast =>\n  cast.map(({ id, name, original_name, character, profile_path }) => ({\n    id,\n    name,\n    original_name,\n    character,\n    profile_path,\n  }));\n\nexport const normalizeReview = reviews =>\n  reviews.map(({ author, content, id }) => ({ author, content, id }));\n"],"names":["props","covers","Array","columns","fill","speed","width","height","rows","map","g","i","vy","coverHeight","Math","floor","vx","coverWidth","x","y","rx","ry","List","styled","Item","NavLink","Link","ImageWrapper","ProgressBarContainer","Canvas","CircularProgressbar","Progressbar","value","text","background","backgroundPadding","styles","buildStyles","textColor","pathColor","trailColor","backgroundColor","textSize","movies","setIsLoading","location","useLocation","onComplete","after","length","index","title","id","poster","averageVote","to","state","from","src","alt","onLoad","onError","position","reverseOrder","useFetch","isLoading","fetchMoviesList","fetch","useRef","current","useEffect","controller","AbortController","fetchParams","abort","axios","fetchMovies","query","signal","params","api_key","response","data","useState","setMovies","movie","setMovie","cast","setCast","reviews","setReviews","then","results","toast","poster_path","vote_average","round","normalizeMovies","catch","error","message","fetchMovie","release_date","popularity","backdrop_path","tagline","genres","overview","date","split","genreList","genre","name","join","normalizeMovie","fetchCast","original_name","character","profile_path","normalizeCast","fetcReviews","author","content","normalizeReview"],"sourceRoot":""}