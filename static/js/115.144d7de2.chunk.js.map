{"version":3,"file":"static/js/115.144d7de2.chunk.js","mappings":"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","sources":["components/cast/Cast.styled.js","components/cast/Cast.jsx","components/loader/NetflixLoader.jsx","components/toast/Toast.jsx","services/API.js","services/hooks.js","services/funcs.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  opacity: 0;\n  transition: opacity 500ms;\n  position: absolute;\n  top: 100px;\n  left: 0;\n  &.loaded {\n    opacity: 1;\n  }\n`;\n\nexport const CastItem = styled.li`\n  max-width: 180px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useRef } from 'react';\nimport Message from 'components/toast/Toast';\nimport { after } from 'underscore';\nimport NetflixLoader from 'components/loader/NetflixLoader';\nimport useFetch from 'services/hooks';\nimport { CastList, CastItem } from './Cast.styled';\n\nconst Cast = () => {\n  const { cast, fetchCast, isLoading, setIsLoading } = useFetch();\n  const { moviesId } = useParams();\n  const { current: fetch } = useRef(fetchCast);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    fetch({ fetchParams: `movie/${moviesId}/credits`, controller });\n    return () => {\n      controller.abort();\n    };\n  }, [fetch, moviesId]);\n\n  const onComplete = after(cast.length, () => {\n    setIsLoading(false);\n  });\n\n  return (\n    <>\n      {isLoading && <NetflixLoader column={6} height={270} width={180} />}\n      {!!cast.length && (\n        <CastList className={!isLoading && 'loaded'}>\n          {cast.map(({ id, name, original_name, character, profile }) => (\n            <CastItem key={id}>\n              <img\n                src={profile}\n                alt={name}\n                width=\"180px\"\n                height=\"270px\"\n                onLoad={onComplete}\n                onError={onComplete}\n              />\n              <p>{original_name}</p>\n              <p>Character: {character}</p>\n            </CastItem>\n          ))}\n        </CastList>\n      )}\n      <Message />\n    </>\n  );\n};\n\nexport default Cast;\n","import ContentLoader from 'react-content-loader';\n\nconst NetflixLoader = props => {\n  const { column = 4, height = 450, width = 300 } = props;\n  const rows = 3;\n  const columns = column;\n  const coverHeight = height;\n  const coverWidth = width;\n  const padding = 5;\n  const speed = 1;\n\n  const coverHeightWithPadding = coverHeight + padding;\n  const coverWidthWithPadding = coverWidth + padding;\n  const initial = 35;\n  const covers = Array(columns * rows).fill(1);\n\n  return (\n    <ContentLoader\n      speed={speed}\n      width={columns * coverWidthWithPadding}\n      height={rows * coverHeightWithPadding}\n      // {...props}\n    >\n      {covers.map((g, i) => {\n        let vy = Math.floor(i / columns) * coverHeightWithPadding + initial;\n        let vx =\n          (i * coverWidthWithPadding) % (columns * coverWidthWithPadding);\n        return (\n          <rect\n            key={i}\n            x={vx}\n            y={vy}\n            rx=\"0\"\n            ry=\"0\"\n            width={coverWidth}\n            height={coverHeight}\n          />\n        );\n      })}\n    </ContentLoader>\n  );\n};\n\nexport default NetflixLoader;\n","import { Toaster } from 'react-hot-toast';\n\nconst Message = () => {\n  return <Toaster position=\"top-center\" reverseOrder={false} />;\n};\n\nexport default Message;\n","import axios from 'axios';\nconst API_KEY = 'c095a52b18be81f1ee1fe016a8531acc';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchMovies = async ({\n  fetchParams,\n  query = null,\n  controller,\n}) => {\n  const response = await axios(fetchParams, {\n    signal: controller.signal,\n    params: { api_key: API_KEY, query },\n  });\n  return response.data;\n};\n","import { useState } from 'react';\nimport { fetchMovies } from './API';\nimport {\n  normalizeMovies,\n  normalizeMovie,\n  normalizeCast,\n  normalizeReview,\n} from './funcs';\nimport toast from 'react-hot-toast';\n\nconst useFetch = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [movie, setMovie] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n  const [contentIsLoading, setContentIsLoading] = useState(false);\n\n  const fetchMoviesList = params => {\n    setIsLoading(true);\n    fetchMovies(params)\n      .then(response => {\n        if (!response.results.length) {\n          setIsLoading(false);\n          toast.error('Nothing found!');\n        }\n        const movies = normalizeMovies(response.results);\n\n        setMovies(movies);\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') {\n          setIsLoading(false);\n          toast.error(error.message);\n        }\n      });\n  };\n\n  const fetchMovie = params => {\n    setIsLoading(true);\n    fetchMovies(params)\n      .then(response => {\n        setMovie(normalizeMovie(response));\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') {\n          setIsLoading(false);\n          toast.error(error.message);\n        }\n      });\n  };\n\n  const fetchCast = params => {\n    setIsLoading(true);\n    fetchMovies(params)\n      .then(response => {\n        setCast(normalizeCast(response.cast));\n        if (!response.cast.length)\n          toast.error(\"We don't have any cast for this movie\");\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      });\n  };\n\n  const fetcReviews = params => {\n    setContentIsLoading(true);\n    fetchMovies(params)\n      .then(response => {\n        setReviews(normalizeReview(response.results));\n        if (!response.results.length)\n          toast.error(\"We don't have any reviews for this movie\");\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      });\n  };\n\n  return {\n    movies,\n    fetchMoviesList,\n    movie,\n    fetchMovie,\n    cast,\n    fetchCast,\n    reviews,\n    fetcReviews,\n    isLoading,\n    setIsLoading,\n    contentIsLoading,\n    setContentIsLoading,\n  };\n};\n\nexport default useFetch;\n","export const normalizeMovies = movies =>\n  movies.map(({ title, id, poster_path, vote_average }) => {\n    const poster = poster_path\n      ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n      : 'https://placehold.co/500x750/png';\n\n    const averageVote = vote_average && Math.round(vote_average * 10);\n    return { title, id, poster, averageVote };\n  });\n\nexport const normalizeMovie = ({\n  release_date,\n  title,\n  poster_path,\n  popularity,\n  backdrop_path,\n  id,\n  tagline,\n  genres,\n  overview,\n}) => {\n  const date = release_date\n    ? release_date.split('-')[0]\n    : 'No release information';\n\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n    : 'https://placehold.co/500x750/png';\n  const genreList = genres.map(genre => genre.name).join(' ');\n  const genre = genreList.length ? genreList : 'No genre information';\n\n  return {\n    date,\n    title,\n    tagline,\n    id,\n    poster,\n    popularity: popularity + '',\n    backdrop_path,\n    genre,\n    overview,\n  };\n};\n\nexport const normalizeCast = cast =>\n  cast.map(({ id, name, original_name, character, profile_path }) => {\n    const profile = profile_path\n      ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n      : 'https://placehold.co/80x100/png';\n    return {\n      id,\n      name,\n      original_name,\n      character,\n      profile,\n    };\n  });\n\nexport const normalizeReview = reviews =>\n  reviews.map(({ author, author_details: { avatar_path }, content, id }) => {\n    let avatar = null;\n    if (avatar_path && !avatar_path?.includes('https')) {\n      avatar = `https://image.tmdb.org/t/p/w500/${avatar_path}`;\n    } else {\n      avatar = 'https://placehold.co/80x80/png';\n    }\n\n    return { author, content, id, avatar };\n  });\n"],"names":["CastList","styled","CastItem","useFetch","cast","fetchCast","isLoading","setIsLoading","moviesId","useParams","fetch","useRef","current","useEffect","controller","AbortController","fetchParams","abort","onComplete","after","length","NetflixLoader","column","height","width","className","map","id","name","original_name","character","profile","src","alt","onLoad","onError","props","columns","coverHeight","coverWidth","coverHeightWithPadding","coverWidthWithPadding","covers","Array","fill","speed","g","i","vy","Math","floor","vx","x","y","rx","ry","position","reverseOrder","axios","fetchMovies","query","signal","params","api_key","response","data","useState","movies","setMovies","movie","setMovie","setCast","reviews","setReviews","contentIsLoading","setContentIsLoading","fetchMoviesList","then","results","toast","title","poster_path","vote_average","poster","averageVote","round","normalizeMovies","catch","error","message","fetchMovie","release_date","popularity","backdrop_path","tagline","genres","overview","date","split","genreList","genre","join","normalizeMovie","profile_path","normalizeCast","fetcReviews","author","avatar_path","author_details","content","avatar","includes","normalizeReview"],"sourceRoot":""}