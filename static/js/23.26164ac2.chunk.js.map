{"version":3,"file":"static/js/23.26164ac2.chunk.js","mappings":"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","sources":["components/reviews/Reviews.jsx","components/toast/Toast.jsx","services/API.js","services/hooks.js","services/funcs.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useRef } from 'react';\nimport Message from 'components/toast/Toast';\nimport useFetch from 'services/hooks';\n\nconst Reviews = () => {\n  const { reviews, fetcReviews } = useFetch();\n  const { moviesId } = useParams();\n  const { current: fetch } = useRef(fetcReviews);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    fetch({ fetchParams: `movie/${moviesId}/reviews`, controller });\n    return () => {\n      controller.abort();\n    };\n  }, [fetch, moviesId]);\n  return (\n    <>\n      {!!reviews.length && (\n        <ul>\n          {reviews.map(({ author, content, id }) => (\n            <li key={id}>\n              <h2>Author: {author}</h2>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {!reviews.length && <p>We don't have any reviews for this movie</p>}\n      <Message />\n    </>\n  );\n};\n\nexport default Reviews;\n","import { Toaster } from 'react-hot-toast';\n\nconst Message = () => {\n  return <Toaster position=\"top-center\" reverseOrder={false} />;\n};\n\nexport default Message;\n","import axios from 'axios';\nconst API_KEY = 'c095a52b18be81f1ee1fe016a8531acc';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchMovies = async ({\n  fetchParams,\n  query = null,\n  controller,\n}) => {\n  const response = await axios(fetchParams, {\n    signal: controller.signal,\n    params: { api_key: API_KEY, query },\n  });\n  return response.data;\n};\n","import { useState } from 'react';\nimport { fetchMovies } from './API';\nimport {\n  normalizeMovies,\n  normalizeMovie,\n  normalizeCast,\n  normalizeReview,\n} from './funcs';\nimport toast from 'react-hot-toast';\n\nconst useFetch = () => {\n  const [movies, setMovies] = useState([]);\n  const [showLoader, setShowLoader] = useState(false);\n  const [movie, setMovie] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n\n  const fetchMoviesList = params => {\n    setShowLoader(true);\n    fetchMovies(params)\n      .then(response => {\n        if (!response.results.length) toast.error('Nothing found!');\n        const movies = normalizeMovies(response.results);\n        setMovies(movies);\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      })\n      .finally(() => {\n        setShowLoader(false);\n      });\n  };\n\n  const fetchMovie = params => {\n    setShowLoader(true);\n    fetchMovies(params)\n      .then(response => {\n        setMovie(normalizeMovie(response));\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      })\n      .finally(() => {\n        setShowLoader(false);\n      });\n  };\n\n  const fetchCast = params => {\n    fetchMovies(params)\n      .then(response => {\n        setCast(normalizeCast(response.cast));\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      });\n  };\n\n  const fetcReviews = params => {\n    fetchMovies(params)\n      .then(response => {\n        setReviews(normalizeReview(response.results));\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      });\n  };\n\n  return {\n    movies,\n    fetchMoviesList,\n    movie,\n    fetchMovie,\n    cast,\n    fetchCast,\n    reviews,\n    fetcReviews,\n    showLoader,\n  };\n};\n\nexport default useFetch;\n","export const normalizeMovies = movies =>\n  movies.map(({ title, id }) => ({ title, id }));\n\nexport const normalizeMovie = ({\n  release_date,\n  title,\n  poster_path,\n  popularity,\n  backdrop_path,\n  id,\n  tagline,\n  genres,\n  overview,\n}) => {\n  const date = release_date\n    ? release_date.split('-')[0]\n    : 'No release information';\n\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n    : 'https://placehold.co/500x750/png';\n  const genreList = genres.map(genre => genre.name).join(' ');\n  const genre = genreList.length ? genreList : 'No genre information';\n\n  return {\n    date,\n    title,\n    tagline,\n    id,\n    poster,\n    popularity: popularity + '',\n    backdrop_path,\n    genre,\n    overview,\n  };\n};\n\nexport const normalizeCast = cast =>\n  cast.map(({ id, name, original_name, character, profile_path }) => ({\n    id,\n    name,\n    original_name,\n    character,\n    profile_path,\n  }));\n\nexport const normalizeReview = reviews =>\n  reviews.map(({ author, content, id }) => ({ author, content, id }));\n"],"names":["useFetch","reviews","fetcReviews","moviesId","useParams","fetch","useRef","current","useEffect","controller","AbortController","fetchParams","abort","length","map","author","content","id","position","reverseOrder","axios","fetchMovies","query","signal","params","api_key","response","data","useState","movies","setMovies","showLoader","setShowLoader","movie","setMovie","cast","setCast","setReviews","fetchMoviesList","then","results","toast","title","normalizeMovies","catch","error","message","finally","fetchMovie","release_date","poster_path","popularity","backdrop_path","tagline","genres","overview","date","split","poster","genreList","genre","name","join","normalizeMovie","fetchCast","original_name","character","profile_path","normalizeCast","normalizeReview"],"sourceRoot":""}