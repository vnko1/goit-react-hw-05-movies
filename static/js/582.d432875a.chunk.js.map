{"version":3,"file":"static/js/582.d432875a.chunk.js","mappings":"yPAEaA,EAAkBC,EAAAA,GAAAA,KAAH,kHAQfC,EAAQD,EAAAA,GAAAA,MAAH,oJASLE,EAASF,EAAAA,GAAAA,OAAH,qN,SCkBnB,EAjCmB,SAAC,GAAyB,IAAvBG,EAAsB,EAAtBA,gBACpB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAcA,OACE,UAACP,EAAD,CAAiBQ,SAbI,SAAAC,GACrBA,EAAEC,iBACGJ,EAAYK,SACjBP,EAAgB,CAAEQ,MAAON,EAAYK,OAAOE,gBAC5CN,EAAe,IAChB,EAQC,WACE,SAACL,EAAD,CACEY,KAAK,OACLC,KAAK,QACLC,MAAOV,EACPW,YAAY,gBACZC,aAAa,MACbC,WAAS,EACTC,SAdiB,SAAAX,GACrB,IAAQO,EAAUP,EAAEY,cAAZL,MACRT,EAAeS,EAChB,KAaG,SAACb,EAAD,CAAQW,KAAK,SAAb,sBAGL,E,wCCSD,EAlCe,WACb,OAA6DQ,EAAAA,EAAAA,KAArDC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,gBAAiBC,EAAjC,EAAiCA,UAAWC,EAA5C,EAA4CA,aAC3BC,GAAUC,EAAAA,EAAAA,QAAOJ,GAA1BK,QACR,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqB3B,EAArB,KACQQ,GAAUoB,EAAAA,EAAAA,UAChB,kBAAMC,OAAOC,aAAP,OAAuBH,GAA7B,GACA,CAACA,IAFKnB,MAkBR,OAbAuB,EAAAA,EAAAA,YAAU,WACR,GAAKvB,EAAL,CACA,IAAMwB,EAAa,IAAIC,gBAMvB,OALAV,EAAM,CACJS,WAAAA,EACAE,YAAa,eACb1B,MAAAA,IAEK,WACLwB,EAAWG,OACZ,CATiB,CAUnB,GAAE,CAACZ,EAAOf,KAGT,iCACE,SAAC,EAAD,CAAYR,gBAAiBA,IAC5BqB,IAAa,SAACe,EAAA,EAAD,MACXjB,EAAOkB,SACR,SAACC,EAAA,EAAD,CAAYnB,OAAQA,EAAQG,aAAcA,KAE5C,SAAC,IAAD,MAGL,C","sources":["components/searchForm/SearchForm.styled.js","components/searchForm/SearchForm.jsx","pages/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieSearchForm = styled.form`\n  width: 400px;\n  padding-top: 20px;\n  margin: 0 auto;\n  display: flex;\n  gap: 10px;\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  padding: 4px 8px;\n  border: none;\n  border-radius: 5px;\n  outline: none;\n  background-color: silver;\n`;\n\nexport const Button = styled.button`\n  padding: 4px 8px;\n  border: none;\n  border-radius: 5px;\n  outline: none;\n  background-color: silver;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    background-color: tomato;\n  }\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { MovieSearchForm, Input, Button } from './SearchForm.styled';\n\nconst SearchForm = ({ setSearchParams }) => {\n  const [querySearch, setQuerySearch] = useState('');\n\n  const onHandleSubmit = e => {\n    e.preventDefault();\n    if (!querySearch.trim()) return;\n    setSearchParams({ query: querySearch.trim().toLowerCase() });\n    setQuerySearch('');\n  };\n\n  const onHandleChange = e => {\n    const { value } = e.currentTarget;\n    setQuerySearch(value);\n  };\n\n  return (\n    <MovieSearchForm onSubmit={onHandleSubmit}>\n      <Input\n        type=\"text\"\n        name=\"query\"\n        value={querySearch}\n        placeholder=\"Search movies\"\n        autoComplete=\"off\"\n        autoFocus\n        onChange={onHandleChange}\n      />\n      <Button type=\"submit\">Search</Button>\n    </MovieSearchForm>\n  );\n};\n\nSearchForm.propTypes = { setSearchParams: PropTypes.func.isRequired };\n\nexport default SearchForm;\n","import { useEffect, useMemo, useRef } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport SearchForm from 'components/searchForm/SearchForm';\nimport MoviesList from 'components/movieList/MoviesList';\nimport Message from 'components/toast/Toast';\nimport NetflixLoader from 'components/loader/NetflixLoader';\nimport useFetch from 'services/hooks';\n\nconst Movies = () => {\n  const { movies, fetchMoviesList, isLoading, setIsLoading } = useFetch();\n  const { current: fetch } = useRef(fetchMoviesList);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const { query } = useMemo(\n    () => Object.fromEntries([...searchParams]),\n    [searchParams]\n  );\n\n  useEffect(() => {\n    if (!query) return;\n    const controller = new AbortController();\n    fetch({\n      controller,\n      fetchParams: 'search/movie',\n      query,\n    });\n    return () => {\n      controller.abort();\n    };\n  }, [fetch, query]);\n\n  return (\n    <>\n      <SearchForm setSearchParams={setSearchParams} />\n      {isLoading && <NetflixLoader />}\n      {!!movies.length && (\n        <MoviesList movies={movies} setIsLoading={setIsLoading} />\n      )}\n      <Message />\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["MovieSearchForm","styled","Input","Button","setSearchParams","useState","querySearch","setQuerySearch","onSubmit","e","preventDefault","trim","query","toLowerCase","type","name","value","placeholder","autoComplete","autoFocus","onChange","currentTarget","useFetch","movies","fetchMoviesList","isLoading","setIsLoading","fetch","useRef","current","useSearchParams","searchParams","useMemo","Object","fromEntries","useEffect","controller","AbortController","fetchParams","abort","NetflixLoader","length","MoviesList"],"sourceRoot":""}