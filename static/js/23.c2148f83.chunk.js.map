{"version":3,"file":"static/js/23.c2148f83.chunk.js","mappings":"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","sources":["components/reviews/Reviews.jsx","components/toast/Toast.jsx","services/API.js","services/hooks.js","services/funcs.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useRef } from 'react';\nimport Message from 'components/toast/Toast';\nimport useFetch from 'services/hooks';\n\nconst Reviews = () => {\n  const { reviews, fetcReviews } = useFetch();\n  const { moviesId } = useParams();\n  const { current: fetch } = useRef(fetcReviews);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    fetch({ fetchParams: `movie/${moviesId}/reviews`, controller });\n    return () => {\n      controller.abort();\n    };\n  }, [fetch, moviesId]);\n  return (\n    <>\n      {!!reviews.length && (\n        <ul>\n          {reviews.map(({ author, content, id }) => (\n            <li key={id}>\n              <h2>Author: {author}</h2>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      <Message />\n    </>\n  );\n};\n\nexport default Reviews;\n","import { Toaster } from 'react-hot-toast';\n\nconst Message = () => {\n  return <Toaster position=\"top-center\" reverseOrder={false} />;\n};\n\nexport default Message;\n","import axios from 'axios';\nconst API_KEY = 'c095a52b18be81f1ee1fe016a8531acc';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchMovies = async ({\n  fetchParams,\n  query = null,\n  controller,\n}) => {\n  const response = await axios(fetchParams, {\n    signal: controller.signal,\n    params: { api_key: API_KEY, query },\n  });\n  return response.data;\n};\n","import { useState } from 'react';\nimport { fetchMovies } from './API';\nimport {\n  normalizeMovies,\n  normalizeMovie,\n  normalizeCast,\n  normalizeReview,\n} from './funcs';\nimport toast from 'react-hot-toast';\n\nconst useFetch = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [movie, setMovie] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n\n  const fetchMoviesList = params => {\n    setIsLoading(true);\n    fetchMovies(params)\n      .then(response => {\n        if (!response.results.length) {\n          setIsLoading(false);\n          toast.error('Nothing found!');\n        }\n        const movies = normalizeMovies(response.results);\n\n        setMovies(movies);\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') {\n          setIsLoading(false);\n          toast.error(error.message);\n        }\n      });\n  };\n\n  const fetchMovie = params => {\n    setIsLoading(true);\n    fetchMovies(params)\n      .then(response => {\n        setMovie(normalizeMovie(response));\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') {\n          setIsLoading(false);\n          toast.error(error.message);\n        }\n      });\n  };\n\n  const fetchCast = params => {\n    fetchMovies(params)\n      .then(response => {\n        setCast(normalizeCast(response.cast));\n        if (!response.cast.length)\n          toast.error(\"We don't have any cast for this movie\");\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      });\n  };\n\n  const fetcReviews = params => {\n    fetchMovies(params)\n      .then(response => {\n        setReviews(normalizeReview(response.results));\n        if (!response.results.length)\n          toast.error(\"We don't have any reviews for this movie\");\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      });\n  };\n\n  return {\n    movies,\n    fetchMoviesList,\n    movie,\n    fetchMovie,\n    cast,\n    fetchCast,\n    reviews,\n    fetcReviews,\n    isLoading,\n    setIsLoading,\n  };\n};\n\nexport default useFetch;\n","export const normalizeMovies = movies =>\n  movies.map(({ title, id, poster_path, vote_average }) => {\n    const poster = poster_path\n      ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n      : 'https://placehold.co/500x750/png';\n\n    const averageVote = vote_average && Math.round(vote_average * 10);\n    return { title, id, poster, averageVote };\n  });\n\nexport const normalizeMovie = ({\n  release_date,\n  title,\n  poster_path,\n  popularity,\n  backdrop_path,\n  id,\n  tagline,\n  genres,\n  overview,\n}) => {\n  const date = release_date\n    ? release_date.split('-')[0]\n    : 'No release information';\n\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n    : 'https://placehold.co/500x750/png';\n  const genreList = genres.map(genre => genre.name).join(' ');\n  const genre = genreList.length ? genreList : 'No genre information';\n\n  return {\n    date,\n    title,\n    tagline,\n    id,\n    poster,\n    popularity: popularity + '',\n    backdrop_path,\n    genre,\n    overview,\n  };\n};\n\nexport const normalizeCast = cast =>\n  cast.map(({ id, name, original_name, character, profile_path }) => ({\n    id,\n    name,\n    original_name,\n    character,\n    profile_path,\n  }));\n\nexport const normalizeReview = reviews =>\n  reviews.map(({ author, content, id }) => ({ author, content, id }));\n"],"names":["useFetch","reviews","fetcReviews","moviesId","useParams","fetch","useRef","current","useEffect","controller","AbortController","fetchParams","abort","length","map","author","content","id","position","reverseOrder","axios","fetchMovies","query","signal","params","api_key","response","data","useState","movies","setMovies","isLoading","setIsLoading","movie","setMovie","cast","setCast","setReviews","fetchMoviesList","then","results","toast","title","poster_path","vote_average","poster","averageVote","Math","round","normalizeMovies","catch","error","message","fetchMovie","release_date","popularity","backdrop_path","tagline","genres","overview","date","split","genreList","genre","name","join","normalizeMovie","fetchCast","original_name","character","profile_path","normalizeCast","normalizeReview"],"sourceRoot":""}