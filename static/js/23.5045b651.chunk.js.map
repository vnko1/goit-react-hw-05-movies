{"version":3,"file":"static/js/23.5045b651.chunk.js","mappings":"sNA4CA,UAtCgB,WACd,IAAQA,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAAS,CAAEC,YAAY,SAAD,OAAWT,EAAX,YAA+BM,WAAAA,GAU3D,OARAI,EAAAA,EAAAA,IAAYF,GACTG,MAAK,SAAAC,GACJR,GAAWS,EAAAA,EAAAA,IAAgBD,EAASE,SACrC,IACAC,OAAM,SAAAC,GACiB,aAAlBA,EAAMC,SAAwBC,EAAAA,GAAAA,MAAYF,EAAMC,QACrD,IAEI,WACLX,EAAWa,OACZ,CACF,GAAE,CAACnB,KAEF,kCACKG,EAAQiB,SACT,wBACGjB,EAAQkB,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACX,2BACE,qCAAaF,MACb,uBAAIC,MAFGC,EADE,OAQfrB,EAAQiB,SAAU,qEACpB,SAAC,IAAD,MAGL,C,8CCpCD,IAJgB,WACd,OAAO,SAAC,KAAD,CAASK,SAAS,aAAaC,cAAc,GACrD,C,mMCADC,EAAAA,EAAAA,SAAAA,QAFiB,gCAIV,IAAMjB,EAAW,mCAAG,oGACzBD,EADyB,EACzBA,YADyB,IAEzBmB,MAAAA,OAFyB,MAEjB,KAFiB,EAGzBtB,EAHyB,EAGzBA,WAHyB,UAKFqB,EAAAA,EAAAA,GAAMlB,EAAa,CACxCoB,OAAQvB,EAAWuB,OACnBrB,OAAQ,CAAEsB,QAZE,mCAYgBF,MAAAA,KAPL,cAKnBhB,EALmB,yBASlBA,EAASmB,MATS,2CAAH,sDCNXC,EAAkB,SAAAC,GAAM,OACnCA,EAAOZ,KAAI,kBAAoB,CAAEa,MAAtB,EAAGA,MAA0BV,GAA7B,EAAUA,GAAV,GADwB,EAGxBW,EAAiB,SAAC,GAUxB,IATLC,EASI,EATJA,aACAF,EAQI,EARJA,MACAG,EAOI,EAPJA,YACAC,EAMI,EANJA,WACAC,EAKI,EALJA,cACAf,EAII,EAJJA,GACAgB,EAGI,EAHJA,QACAC,EAEI,EAFJA,OACAC,EACI,EADJA,SAEMC,EAAOP,EACTA,EAAaQ,MAAM,KAAK,GACxB,yBAEEC,EAASR,EAAW,0CACaA,GACnC,mCACES,EAAYL,EAAOpB,KAAI,SAAA0B,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,KAGvD,MAAO,CACLN,KAAAA,EACAT,MAAAA,EACAM,QAAAA,EACAhB,GAAAA,EACAqB,OAAAA,EACAP,WAAYA,EAAa,GACzBC,cAAAA,EACAQ,MAVYD,EAAU1B,OAAS0B,EAAY,uBAW3CJ,SAAAA,EAEH,EAEYQ,EAAgB,SAAAC,GAAI,OAC/BA,EAAK9B,KAAI,kBAA2D,CAClEG,GADO,EAAGA,GAEVwB,KAFO,EAAOA,KAGdI,cAHO,EAAaA,cAIpBC,UAJO,EAA4BA,UAKnCC,aALO,EAAuCA,aAAvC,GADsB,EASpBzC,EAAkB,SAAAV,GAAO,OACpCA,EAAQkB,KAAI,kBAA8B,CAAEC,OAAhC,EAAGA,OAAqCC,QAAxC,EAAWA,QAAsCC,GAAjD,EAAoBA,GAApB,GADwB,C","sources":["components/reviews/Reviews.jsx","components/toast/Toast.jsx","services/API.js","services/funcs.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport Message from 'components/toast/Toast';\nimport { fetchMovies, normalizeReview } from 'services';\n\nconst Reviews = () => {\n  const { moviesId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const params = { fetchParams: `movie/${moviesId}/reviews`, controller };\n\n    fetchMovies(params)\n      .then(response => {\n        setReviews(normalizeReview(response.results));\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      });\n\n    return () => {\n      controller.abort();\n    };\n  }, [moviesId]);\n  return (\n    <>\n      {!!reviews.length && (\n        <ul>\n          {reviews.map(({ author, content, id }) => (\n            <li key={id}>\n              <h2>Author: {author}</h2>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {!reviews.length && <p>We don't have any reviews for this movie</p>}\n      <Message />\n    </>\n  );\n};\n\nexport default Reviews;\n","import { Toaster } from 'react-hot-toast';\n\nconst Message = () => {\n  return <Toaster position=\"top-center\" reverseOrder={false} />;\n};\n\nexport default Message;\n","import axios from 'axios';\nconst API_KEY = 'c095a52b18be81f1ee1fe016a8531acc';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchMovies = async ({\n  fetchParams,\n  query = null,\n  controller,\n}) => {\n  const response = await axios(fetchParams, {\n    signal: controller.signal,\n    params: { api_key: API_KEY, query },\n  });\n  return response.data;\n};\n","export const normalizeMovies = movies =>\n  movies.map(({ title, id }) => ({ title, id }));\n\nexport const normalizeMovie = ({\n  release_date,\n  title,\n  poster_path,\n  popularity,\n  backdrop_path,\n  id,\n  tagline,\n  genres,\n  overview,\n}) => {\n  const date = release_date\n    ? release_date.split('-')[0]\n    : 'No release information';\n\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n    : 'https://placehold.co/500x750/png';\n  const genreList = genres.map(genre => genre.name).join(' ');\n  const genre = genreList.length ? genreList : 'No genre information';\n\n  return {\n    date,\n    title,\n    tagline,\n    id,\n    poster,\n    popularity: popularity + '',\n    backdrop_path,\n    genre,\n    overview,\n  };\n};\n\nexport const normalizeCast = cast =>\n  cast.map(({ id, name, original_name, character, profile_path }) => ({\n    id,\n    name,\n    original_name,\n    character,\n    profile_path,\n  }));\n\nexport const normalizeReview = reviews =>\n  reviews.map(({ author, content, id }) => ({ author, content, id }));\n"],"names":["moviesId","useParams","useState","reviews","setReviews","useEffect","controller","AbortController","params","fetchParams","fetchMovies","then","response","normalizeReview","results","catch","error","message","toast","abort","length","map","author","content","id","position","reverseOrder","axios","query","signal","api_key","data","normalizeMovies","movies","title","normalizeMovie","release_date","poster_path","popularity","backdrop_path","tagline","genres","overview","date","split","poster","genreList","genre","name","join","normalizeCast","cast","original_name","character","profile_path"],"sourceRoot":""}