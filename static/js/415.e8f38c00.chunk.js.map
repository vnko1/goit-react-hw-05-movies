{"version":3,"file":"static/js/415.e8f38c00.chunk.js","mappings":"oKAoBA,IAlBmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,0BACKF,EAAOG,QACRH,EAAOI,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACnB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,GAAME,MAAO,CAAEC,KAAMR,GAA1C,SACGI,KAFIC,EAMZ,KAGR,C,8ECOD,UArBa,WACX,OAA4BI,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAeW,EAAf,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAAS,CAAEC,YAAa,sBAAuBH,WAAAA,GASrD,OARAI,EAAAA,EAAAA,IAAYF,GACTG,MAAK,SAAAC,GACJ,IAAMnB,GAASoB,EAAAA,EAAAA,IAAgBD,EAASE,SACxCV,EAAUX,EACX,IACAsB,OAAM,SAAAC,GAAW,IACjBC,SAAQ,WAAQ,IAEZ,WACLX,EAAWY,OACZ,CACF,GAAE,KACI,SAAC,IAAD,CAAYzB,OAAQA,GAC5B,C,+LCnBD0B,EAAAA,EAAAA,SAAAA,QAFiB,gCAIV,IAAMT,EAAW,mCAAG,oGACzBD,EADyB,EACzBA,YADyB,IAEzBW,MAAAA,OAFyB,MAEjB,KAFiB,EAGzBd,EAHyB,EAGzBA,WAHyB,UAKFa,EAAAA,EAAAA,GAAMV,EAAa,CACxCY,OAAQf,EAAWe,OACnBb,OAAQ,CAAEc,QAZE,mCAYgBF,MAAAA,KAPL,cAKnBR,EALmB,yBASlBA,EAASW,MATS,2CAAH,sDCNXV,EAAkB,SAAApB,GAAM,OACnCA,EAAOI,KAAI,kBAAoB,CAAEC,MAAtB,EAAGA,MAA0BC,GAA7B,EAAUA,GAAV,GADwB,EAGxByB,EAAiB,SAAC,GAUxB,IATLC,EASI,EATJA,aACA3B,EAQI,EARJA,MACA4B,EAOI,EAPJA,YACAC,EAMI,EANJA,WACAC,EAKI,EALJA,cACA7B,EAII,EAJJA,GACA8B,EAGI,EAHJA,QACAC,EAEI,EAFJA,OACAC,EACI,EADJA,SAEMC,EAAOP,EAAaQ,MAAM,KAE1BC,EAAYJ,EAAOjC,KAAI,SAAAsC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,KACvD,MAAO,CACLL,KAAMA,EAAK,GACXlC,MAAAA,EACA+B,QAAAA,EACA9B,GAAAA,EACA2B,YAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAM,UAAAA,EACAH,SAAAA,EAEH,EAEYO,EAAgB,SAAAC,GAAI,OAC/BA,EAAK1C,KAAI,kBAA2D,CAClEE,GADO,EAAGA,GAEVqC,KAFO,EAAOA,KAGdI,cAHO,EAAaA,cAIpBC,UAJO,EAA4BA,UAKnCC,aALO,EAAuCA,aAAvC,GADsB,EASpBC,EAAkB,SAAAC,GAAO,OACpCA,EAAQ/C,KAAI,kBAA8B,CAAEgD,OAAhC,EAAGA,OAAqCC,QAAxC,EAAWA,QAAsC/C,GAAjD,EAAoBA,GAApB,GADwB,C","sources":["components/movieList/MoviesList.jsx","pages/Home.jsx","services/API.js","services/funcs.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {!!movies.length &&\n        movies.map(({ title, id }) => {\n          return (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          );\n        })}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n","import { useState, useEffect } from 'react';\nimport MoviesList from 'components/movieList/MoviesList';\nimport { fetchMovies, normalizeMovies } from 'services';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const params = { fetchParams: 'trending/movie/week', controller };\n    fetchMovies(params)\n      .then(response => {\n        const movies = normalizeMovies(response.results);\n        setMovies(movies);\n      })\n      .catch(error => {})\n      .finally(() => {});\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n  return <MoviesList movies={movies} />;\n};\n\nexport default Home;\n","import axios from 'axios';\nconst API_KEY = 'c095a52b18be81f1ee1fe016a8531acc';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchMovies = async ({\n  fetchParams,\n  query = null,\n  controller,\n}) => {\n  const response = await axios(fetchParams, {\n    signal: controller.signal,\n    params: { api_key: API_KEY, query },\n  });\n  return response.data;\n};\n","export const normalizeMovies = movies =>\n  movies.map(({ title, id }) => ({ title, id }));\n\nexport const normalizeMovie = ({\n  release_date,\n  title,\n  poster_path,\n  popularity,\n  backdrop_path,\n  id,\n  tagline,\n  genres,\n  overview,\n}) => {\n  const date = release_date.split('-');\n\n  const genreList = genres.map(genre => genre.name).join(' ');\n  return {\n    date: date[0],\n    title,\n    tagline,\n    id,\n    poster_path,\n    popularity,\n    backdrop_path,\n    genreList,\n    overview,\n  };\n};\n\nexport const normalizeCast = cast =>\n  cast.map(({ id, name, original_name, character, profile_path }) => ({\n    id,\n    name,\n    original_name,\n    character,\n    profile_path,\n  }));\n\nexport const normalizeReview = reviews =>\n  reviews.map(({ author, content, id }) => ({ author, content, id }));\n"],"names":["movies","location","useLocation","length","map","title","id","to","state","from","useState","setMovies","useEffect","controller","AbortController","params","fetchParams","fetchMovies","then","response","normalizeMovies","results","catch","error","finally","abort","axios","query","signal","api_key","data","normalizeMovie","release_date","poster_path","popularity","backdrop_path","tagline","genres","overview","date","split","genreList","genre","name","join","normalizeCast","cast","original_name","character","profile_path","normalizeReview","reviews","author","content"],"sourceRoot":""}