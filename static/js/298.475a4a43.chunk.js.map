{"version":3,"file":"static/js/298.475a4a43.chunk.js","mappings":"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","sources":["components/toast/Toast.jsx","components/movieInfo/MovieInfo.styled.js","components/movieInfo/MovieInfo.jsx","pages/MovieDetails.jsx","services/API.js","services/funcs.js"],"sourcesContent":["import { Toaster } from 'react-hot-toast';\n\nconst Message = () => {\n  return <Toaster position=\"top-center\" reverseOrder={false} />;\n};\n\nexport default Message;\n","import styled from 'styled-components';\n\nimport { Link } from 'react-router-dom';\n\nexport const MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 30px;\n  padding-top: 20px;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  gap: 30px;\n`;\n\nexport const NavLink = styled(Link)`\n  width: 100px;\n  text-align: center;\n  color: black;\n  padding: 4px 8px;\n  border: none;\n  border-radius: 5px;\n  outline: none;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    color: tomato;\n  }\n`;\n","import { Outlet, useLocation } from 'react-router-dom';\nimport { MainContainer, Container, NavLink } from './MovieInfo.styled';\n\nconst MovieInfo = ({ movie }) => {\n  const { date, title, tagline, poster_path, popularity, genreList, overview } =\n    movie;\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  const currentLocation = { ...location };\n  const name = currentLocation?.state?.from?.pathname;\n  const search = currentLocation?.state?.from?.search;\n\n  return (\n    <MainContainer>\n      <NavLink to={backLinkHref}>Go back</NavLink>\n      <Container>\n        <img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n              : 'https://placehold.co/500x750/png'\n          }\n          alt={tagline}\n        />\n        <div>\n          <div>\n            <h1>{title}</h1>\n            <p>{date ? `(${date})` : 'No release information'}</p>\n          </div>\n          <p>Popularity: {popularity}</p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h2>Genres</h2>\n          <p>{!!genreList.length ? genreList : 'No genre information'}</p>\n        </div>\n      </Container>\n      <div>\n        <h2>Additional information</h2>\n        <ul>\n          <li>\n            <NavLink to=\"cast\" state={{ from: { pathname: name, search } }}>\n              Cast\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"reviews\" state={{ from: { pathname: name, search } }}>\n              Reviews\n            </NavLink>\n          </li>\n        </ul>\n        <Outlet />\n      </div>\n    </MainContainer>\n  );\n};\n\nexport default MovieInfo;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport MovieInfo from 'components/movieInfo/MovieInfo';\nimport Message from 'components/toast/Toast';\nimport Loader from 'components/loader/Loader';\nimport { fetchMovies, normalizeMovie } from 'services';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState(null);\n  const [showLoader, setShowLoader] = useState(false);\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const params = { fetchParams: `movie/${moviesId}`, controller };\n    setShowLoader(true);\n    fetchMovies(params)\n      .then(response => {\n        setMovie(normalizeMovie(response));\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      })\n      .finally(() => {\n        setShowLoader(false);\n      });\n\n    return () => {\n      controller.abort();\n    };\n  }, [moviesId, setShowLoader]);\n\n  return (\n    <>\n      {showLoader && <Loader />}\n      {movie && <MovieInfo movie={movie} />}\n      <Message />\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\nconst API_KEY = 'c095a52b18be81f1ee1fe016a8531acc';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchMovies = async ({\n  fetchParams,\n  query = null,\n  controller,\n}) => {\n  const response = await axios(fetchParams, {\n    signal: controller.signal,\n    params: { api_key: API_KEY, query },\n  });\n  return response.data;\n};\n","export const normalizeMovies = movies =>\n  movies.map(({ title, id }) => ({ title, id }));\n\nexport const normalizeMovie = ({\n  release_date,\n  title,\n  poster_path,\n  popularity,\n  backdrop_path,\n  id,\n  tagline,\n  genres,\n  overview,\n}) => {\n  const date = release_date.split('-');\n\n  const genreList = genres.map(genre => genre.name).join(' ');\n  return {\n    date: date[0],\n    title,\n    tagline,\n    id,\n    poster_path,\n    popularity,\n    backdrop_path,\n    genreList,\n    overview,\n  };\n};\n\nexport const normalizeCast = cast =>\n  cast.map(({ id, name, original_name, character, profile_path }) => ({\n    id,\n    name,\n    original_name,\n    character,\n    profile_path,\n  }));\n\nexport const normalizeReview = reviews =>\n  reviews.map(({ author, content, id }) => ({ author, content, id }));\n"],"names":["position","reverseOrder","MainContainer","styled","Container","NavLink","Link","movie","date","title","tagline","poster_path","popularity","genreList","overview","location","useLocation","backLinkHref","state","from","currentLocation","name","pathname","search","to","src","alt","length","useState","setMovie","showLoader","setShowLoader","moviesId","useParams","useEffect","controller","AbortController","params","fetchParams","fetchMovies","then","response","normalizeMovie","catch","error","message","toast","finally","abort","Loader","axios","query","signal","api_key","data","normalizeMovies","movies","map","id","release_date","backdrop_path","genres","split","genre","join","normalizeCast","cast","original_name","character","profile_path","normalizeReview","reviews","author","content"],"sourceRoot":""}