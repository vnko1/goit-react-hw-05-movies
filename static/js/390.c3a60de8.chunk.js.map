{"version":3,"file":"static/js/390.c3a60de8.chunk.js","mappings":"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","sources":["components/cast/Cast.jsx","components/toast/Toast.jsx","services/API.js","services/hooks.js","services/funcs.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useRef } from 'react';\nimport Message from 'components/toast/Toast';\nimport useFetch from 'services/hooks';\n\nconst Cast = () => {\n  const { cast, fetchCast } = useFetch();\n  const { moviesId } = useParams();\n  const { current: fetch } = useRef(fetchCast);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    fetch({ fetchParams: `movie/${moviesId}/credits`, controller });\n  }, [fetch, moviesId]);\n\n  return (\n    <>\n      {!!cast.length && (\n        <ul>\n          {cast.map(({ id, name, original_name, character, profile_path }) => (\n            <li key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                    : 'https://placehold.co/80x100/png'\n                }\n                alt={name}\n                width=\"80\"\n              />\n              <p>{original_name}</p>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {!cast.length && <p>We don't have any cast for this movie</p>}\n      <Message />\n    </>\n  );\n};\n\nexport default Cast;\n","import { Toaster } from 'react-hot-toast';\n\nconst Message = () => {\n  return <Toaster position=\"top-center\" reverseOrder={false} />;\n};\n\nexport default Message;\n","import axios from 'axios';\nconst API_KEY = 'c095a52b18be81f1ee1fe016a8531acc';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchMovies = async ({\n  fetchParams,\n  query = null,\n  controller,\n}) => {\n  const response = await axios(fetchParams, {\n    signal: controller.signal,\n    params: { api_key: API_KEY, query },\n  });\n  return response.data;\n};\n","import { useState } from 'react';\nimport { fetchMovies } from './API';\nimport {\n  normalizeMovies,\n  normalizeMovie,\n  normalizeCast,\n  normalizeReview,\n} from './funcs';\nimport toast from 'react-hot-toast';\n\nconst useFetch = () => {\n  const [movies, setMovies] = useState([]);\n  const [showLoader, setShowLoader] = useState(false);\n  const [movie, setMovie] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n\n  const fetchMoviesList = params => {\n    setShowLoader(true);\n    fetchMovies(params)\n      .then(response => {\n        if (!response.results.length) toast.error('Nothing found!');\n        const movies = normalizeMovies(response.results);\n        setMovies(movies);\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      })\n      .finally(() => {\n        setShowLoader(false);\n      });\n  };\n\n  const fetchMovie = params => {\n    setShowLoader(true);\n    fetchMovies(params)\n      .then(response => {\n        setMovie(normalizeMovie(response));\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      })\n      .finally(() => {\n        setShowLoader(false);\n      });\n  };\n\n  const fetchCast = params => {\n    fetchMovies(params)\n      .then(response => {\n        setCast(normalizeCast(response.cast));\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      });\n  };\n\n  const fetcReviews = params => {\n    fetchMovies(params)\n      .then(response => {\n        setReviews(normalizeReview(response.results));\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      });\n  };\n\n  return {\n    movies,\n    fetchMoviesList,\n    movie,\n    fetchMovie,\n    cast,\n    fetchCast,\n    reviews,\n    fetcReviews,\n    showLoader,\n  };\n};\n\nexport default useFetch;\n","export const normalizeMovies = movies =>\n  movies.map(({ title, id }) => ({ title, id }));\n\nexport const normalizeMovie = ({\n  release_date,\n  title,\n  poster_path,\n  popularity,\n  backdrop_path,\n  id,\n  tagline,\n  genres,\n  overview,\n}) => {\n  const date = release_date\n    ? release_date.split('-')[0]\n    : 'No release information';\n\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n    : 'https://placehold.co/500x750/png';\n  const genreList = genres.map(genre => genre.name).join(' ');\n  const genre = genreList.length ? genreList : 'No genre information';\n\n  return {\n    date,\n    title,\n    tagline,\n    id,\n    poster,\n    popularity: popularity + '',\n    backdrop_path,\n    genre,\n    overview,\n  };\n};\n\nexport const normalizeCast = cast =>\n  cast.map(({ id, name, original_name, character, profile_path }) => ({\n    id,\n    name,\n    original_name,\n    character,\n    profile_path,\n  }));\n\nexport const normalizeReview = reviews =>\n  reviews.map(({ author, content, id }) => ({ author, content, id }));\n"],"names":["useFetch","cast","fetchCast","moviesId","useParams","fetch","useRef","current","useEffect","controller","AbortController","fetchParams","length","map","id","name","original_name","character","profile_path","src","alt","width","position","reverseOrder","axios","fetchMovies","query","signal","params","api_key","response","data","useState","movies","setMovies","showLoader","setShowLoader","movie","setMovie","setCast","reviews","setReviews","fetchMoviesList","then","results","toast","title","normalizeMovies","catch","error","message","finally","fetchMovie","release_date","poster_path","popularity","backdrop_path","tagline","genres","overview","date","split","poster","genreList","genre","join","normalizeMovie","normalizeCast","fetcReviews","author","content","normalizeReview"],"sourceRoot":""}