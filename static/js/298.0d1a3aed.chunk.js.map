{"version":3,"file":"static/js/298.0d1a3aed.chunk.js","mappings":"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","sources":["components/toast/Toast.jsx","components/movieInfo/MovieInfo.styled.js","components/movieInfo/MovieInfo.jsx","pages/MovieDetails.jsx","services/API.js","services/hooks.js","services/funcs.js"],"sourcesContent":["import { Toaster } from 'react-hot-toast';\n\nconst Message = () => {\n  return <Toaster position=\"top-center\" reverseOrder={false} />;\n};\n\nexport default Message;\n","import styled from 'styled-components';\n\nimport { Link } from 'react-router-dom';\n\nexport const MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 30px;\n  padding-top: 20px;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  gap: 30px;\n`;\n\nexport const PageLink = styled(Link)`\n  width: 100px;\n  text-align: center;\n  color: black;\n  padding: 4px 8px;\n  border: none;\n  border-radius: 5px;\n  outline: none;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    color: tomato;\n  }\n`;\n","import { Outlet, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { MainContainer, Container, PageLink } from './MovieInfo.styled';\n\nconst MovieInfo = ({ movie }) => {\n  const { date, title, tagline, poster, popularity, genre, overview } = movie;\n\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  const currentLocation = { ...location };\n  const name = currentLocation?.state?.from?.pathname;\n  const search = currentLocation?.state?.from?.search;\n\n  return (\n    <MainContainer>\n      <PageLink to={backLinkHref}>Go back</PageLink>\n      <Container>\n        <img src={poster} alt={tagline} />\n        <div>\n          <div>\n            <h1>{title}</h1>\n            <p>{`${date}`}</p>\n          </div>\n          <p>Popularity: {popularity}</p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h2>Genres</h2>\n          <p>{genre}</p>\n        </div>\n      </Container>\n      <div>\n        <h2>Additional information</h2>\n        <ul>\n          <li>\n            <PageLink to=\"cast\" state={{ from: { pathname: name, search } }}>\n              Cast\n            </PageLink>\n          </li>\n          <li>\n            <PageLink to=\"reviews\" state={{ from: { pathname: name, search } }}>\n              Reviews\n            </PageLink>\n          </li>\n        </ul>\n        <Outlet />\n      </div>\n    </MainContainer>\n  );\n};\n\nMovieInfo.propTypes = {\n  movie: PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    tagline: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    popularity: PropTypes.string.isRequired,\n    genre: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieInfo;\n","import { useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport MovieInfo from 'components/movieInfo/MovieInfo';\nimport Message from 'components/toast/Toast';\nimport Loader from 'components/loader/Loader';\nimport useFetch from 'services/hooks';\n\nconst MovieDetails = () => {\n  const { movie, fetchMovie, showLoader } = useFetch();\n  const { current: fetch } = useRef(fetchMovie);\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    fetch({ fetchParams: `movie/${moviesId}`, controller });\n    return () => {\n      controller.abort();\n    };\n  }, [fetch, moviesId]);\n\n  return (\n    <>\n      {showLoader && <Loader />}\n      {movie && <MovieInfo movie={movie} />}\n      <Message />\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\nconst API_KEY = 'c095a52b18be81f1ee1fe016a8531acc';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchMovies = async ({\n  fetchParams,\n  query = null,\n  controller,\n}) => {\n  const response = await axios(fetchParams, {\n    signal: controller.signal,\n    params: { api_key: API_KEY, query },\n  });\n  return response.data;\n};\n","import { useState } from 'react';\nimport { fetchMovies } from './API';\nimport {\n  normalizeMovies,\n  normalizeMovie,\n  normalizeCast,\n  normalizeReview,\n} from './funcs';\nimport toast from 'react-hot-toast';\n\nconst useFetch = () => {\n  const [movies, setMovies] = useState([]);\n  const [showLoader, setShowLoader] = useState(false);\n  const [movie, setMovie] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n\n  const fetchMoviesList = params => {\n    setShowLoader(true);\n    fetchMovies(params)\n      .then(response => {\n        if (!response.results.length) toast.error('Nothing found!');\n        const movies = normalizeMovies(response.results);\n\n        setMovies(movies);\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      })\n      .finally(() => {\n        setShowLoader(false);\n      });\n  };\n\n  const fetchMovie = params => {\n    setShowLoader(true);\n    fetchMovies(params)\n      .then(response => {\n        setMovie(normalizeMovie(response));\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      })\n      .finally(() => {\n        setShowLoader(false);\n      });\n  };\n\n  const fetchCast = params => {\n    fetchMovies(params)\n      .then(response => {\n        setCast(normalizeCast(response.cast));\n        if (!response.cast.length)\n          toast.error(\"We don't have any cast for this movie\");\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      });\n  };\n\n  const fetcReviews = params => {\n    fetchMovies(params)\n      .then(response => {\n        setReviews(normalizeReview(response.results));\n        if (!response.results.length)\n          toast.error(\"We don't have any reviews for this movie\");\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      });\n  };\n\n  return {\n    movies,\n    fetchMoviesList,\n    movie,\n    fetchMovie,\n    cast,\n    fetchCast,\n    reviews,\n    fetcReviews,\n    showLoader,\n  };\n};\n\nexport default useFetch;\n","export const normalizeMovies = movies =>\n  movies.map(({ title, id, poster_path, vote_average }) => {\n    const poster = poster_path\n      ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n      : 'https://placehold.co/500x750/png';\n\n    const averageVote = vote_average && Math.round(vote_average * 10);\n    return { title, id, poster, averageVote };\n  });\n\nexport const normalizeMovie = ({\n  release_date,\n  title,\n  poster_path,\n  popularity,\n  backdrop_path,\n  id,\n  tagline,\n  genres,\n  overview,\n}) => {\n  const date = release_date\n    ? release_date.split('-')[0]\n    : 'No release information';\n\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n    : 'https://placehold.co/500x750/png';\n  const genreList = genres.map(genre => genre.name).join(' ');\n  const genre = genreList.length ? genreList : 'No genre information';\n\n  return {\n    date,\n    title,\n    tagline,\n    id,\n    poster,\n    popularity: popularity + '',\n    backdrop_path,\n    genre,\n    overview,\n  };\n};\n\nexport const normalizeCast = cast =>\n  cast.map(({ id, name, original_name, character, profile_path }) => ({\n    id,\n    name,\n    original_name,\n    character,\n    profile_path,\n  }));\n\nexport const normalizeReview = reviews =>\n  reviews.map(({ author, content, id }) => ({ author, content, id }));\n"],"names":["position","reverseOrder","MainContainer","styled","Container","PageLink","Link","movie","date","title","tagline","poster","popularity","genre","overview","location","useLocation","backLinkHref","state","from","currentLocation","name","pathname","search","to","src","alt","useFetch","fetchMovie","showLoader","fetch","useRef","current","moviesId","useParams","useEffect","controller","AbortController","fetchParams","abort","Loader","axios","fetchMovies","query","signal","params","api_key","response","data","useState","movies","setMovies","setShowLoader","setMovie","cast","setCast","reviews","setReviews","fetchMoviesList","then","results","length","toast","map","id","poster_path","vote_average","averageVote","Math","round","normalizeMovies","catch","error","message","finally","release_date","backdrop_path","genres","split","genreList","join","normalizeMovie","fetchCast","original_name","character","profile_path","normalizeCast","fetcReviews","author","content","normalizeReview"],"sourceRoot":""}