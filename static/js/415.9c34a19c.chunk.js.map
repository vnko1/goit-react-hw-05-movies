{"version":3,"file":"static/js/415.9c34a19c.chunk.js","mappings":"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","sources":["components/movieList/MovieList.styled.js","components/movieList/MoviesList.jsx","components/toast/Toast.jsx","pages/Home.jsx","services/API.js","services/hooks.js","services/funcs.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const NavLink = styled(Link)`\n  color: black;\n  font-size: 16px;\n  font-weight: 500;\n\n  &:hover,\n  &:focus {\n    color: tomato;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport PropTypes, { shape } from 'prop-types';\nimport { NavLink } from './MovieList.styled';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ListGroup style={{ paddingTop: '10px' }}>\n      {movies.map(({ title, id }) => {\n        return (\n          <ListGroup.Item key={id}>\n            <NavLink to={`/movies/${id}`} state={{ from: location }}>\n              {title}\n            </NavLink>\n          </ListGroup.Item>\n        );\n      })}\n    </ListGroup>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import { Toaster } from 'react-hot-toast';\n\nconst Message = () => {\n  return <Toaster position=\"top-center\" reverseOrder={false} />;\n};\n\nexport default Message;\n","import { useEffect, useRef } from 'react';\nimport MoviesList from 'components/movieList/MoviesList';\nimport Loader from 'components/loader/Loader';\nimport Message from 'components/toast/Toast';\nimport useFetch from 'services/hooks';\n\nconst Home = () => {\n  const { movies, showLoader, fetchMoviesList } = useFetch();\n  const { current: fetch } = useRef(fetchMoviesList);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    fetch({ fetchParams: 'trending/movie/week', controller });\n    return () => {\n      controller.abort();\n    };\n  }, [fetch]);\n\n  return (\n    <>\n      {showLoader && <Loader />}\n      {!!movies.length && <MoviesList movies={movies} />}\n      <Message />\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\nconst API_KEY = 'c095a52b18be81f1ee1fe016a8531acc';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchMovies = async ({\n  fetchParams,\n  query = null,\n  controller,\n}) => {\n  const response = await axios(fetchParams, {\n    signal: controller.signal,\n    params: { api_key: API_KEY, query },\n  });\n  return response.data;\n};\n","import { useState } from 'react';\nimport { fetchMovies } from './API';\nimport {\n  normalizeMovies,\n  normalizeMovie,\n  normalizeCast,\n  normalizeReview,\n} from './funcs';\nimport toast from 'react-hot-toast';\n\nconst useFetch = () => {\n  const [movies, setMovies] = useState([]);\n  const [showLoader, setShowLoader] = useState(false);\n  const [movie, setMovie] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n\n  const fetchMoviesList = params => {\n    setShowLoader(true);\n    fetchMovies(params)\n      .then(response => {\n        if (!response.results.length) toast.error('Nothing found!');\n        const movies = normalizeMovies(response.results);\n        setMovies(movies);\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      })\n      .finally(() => {\n        setShowLoader(false);\n      });\n  };\n\n  const fetchMovie = params => {\n    setShowLoader(true);\n    fetchMovies(params)\n      .then(response => {\n        setMovie(normalizeMovie(response));\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      })\n      .finally(() => {\n        setShowLoader(false);\n      });\n  };\n\n  const fetchCast = params => {\n    fetchMovies(params)\n      .then(response => {\n        setCast(normalizeCast(response.cast));\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      });\n  };\n\n  const fetcReviews = params => {\n    fetchMovies(params)\n      .then(response => {\n        setReviews(normalizeReview(response.results));\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') toast.error(error.message);\n      });\n  };\n\n  return {\n    movies,\n    fetchMoviesList,\n    movie,\n    fetchMovie,\n    cast,\n    fetchCast,\n    reviews,\n    fetcReviews,\n    showLoader,\n  };\n};\n\nexport default useFetch;\n","export const normalizeMovies = movies =>\n  movies.map(({ title, id }) => ({ title, id }));\n\nexport const normalizeMovie = ({\n  release_date,\n  title,\n  poster_path,\n  popularity,\n  backdrop_path,\n  id,\n  tagline,\n  genres,\n  overview,\n}) => {\n  const date = release_date\n    ? release_date.split('-')[0]\n    : 'No release information';\n\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n    : 'https://placehold.co/500x750/png';\n  const genreList = genres.map(genre => genre.name).join(' ');\n  const genre = genreList.length ? genreList : 'No genre information';\n\n  return {\n    date,\n    title,\n    tagline,\n    id,\n    poster,\n    popularity: popularity + '',\n    backdrop_path,\n    genre,\n    overview,\n  };\n};\n\nexport const normalizeCast = cast =>\n  cast.map(({ id, name, original_name, character, profile_path }) => ({\n    id,\n    name,\n    original_name,\n    character,\n    profile_path,\n  }));\n\nexport const normalizeReview = reviews =>\n  reviews.map(({ author, content, id }) => ({ author, content, id }));\n"],"names":["NavLink","styled","Link","movies","location","useLocation","ListGroup","style","paddingTop","map","title","id","to","state","from","position","reverseOrder","useFetch","showLoader","fetchMoviesList","fetch","useRef","current","useEffect","controller","AbortController","fetchParams","abort","length","axios","fetchMovies","query","signal","params","api_key","response","data","useState","setMovies","setShowLoader","movie","setMovie","cast","setCast","reviews","setReviews","then","results","toast","normalizeMovies","catch","error","message","finally","fetchMovie","release_date","poster_path","popularity","backdrop_path","tagline","genres","overview","date","split","poster","genreList","genre","name","join","normalizeMovie","fetchCast","original_name","character","profile_path","normalizeCast","fetcReviews","author","content","normalizeReview"],"sourceRoot":""}