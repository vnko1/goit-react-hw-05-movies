{"version":3,"file":"static/js/379.5a81917b.chunk.js","mappings":"oKAoBA,IAlBmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,0BACKF,EAAOG,QACRH,EAAOI,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACnB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,GAAME,MAAO,CAAEC,KAAMR,GAA1C,SACGI,KAFIC,EAMZ,KAGR,C,mHCeD,EA/BmB,SAAC,GAAyB,IAAvBI,EAAsB,EAAtBA,gBACpB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAcA,OACE,kBAAMC,SAbe,SAAAC,GACrBA,EAAEC,iBACGJ,EAAYK,SACjBP,EAAgB,CAAEQ,MAAON,EAAYK,OAAOE,gBAC5CN,EAAe,IAChB,EAQC,WACE,kBACEO,KAAK,OACLC,KAAK,QACLC,MAAOV,EACPW,YAAY,gBACZC,aAAa,MACbC,WAAS,EACTC,SAdiB,SAAAX,GACrB,IAAQO,EAAUP,EAAEY,cAAZL,MACRT,EAAeS,EAChB,KAaG,mBAAQF,KAAK,SAAb,sBAGL,E,kBCaD,EAtCe,WACb,OAA4BT,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAe4B,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBpB,EAArB,KACQQ,GAAUa,EAAAA,EAAAA,UAChB,kBAAMC,OAAOC,aAAP,OAAuBH,GAA7B,GACA,CAACA,IAFKZ,MA2BR,OAtBAgB,EAAAA,EAAAA,YAAU,WACR,GAAKhB,EAAL,CACA,IAAMiB,EAAa,IAAIC,gBACjBC,EAAS,CACbF,WAAAA,EACAG,YAAa,eACbpB,MAAAA,GAWF,OARAqB,EAAAA,EAAAA,IAAYF,GACTG,MAAK,SAAAC,GACJ,IAAMzC,GAAS0C,EAAAA,EAAAA,IAAgBD,EAASE,SACxCf,EAAU5B,EACX,IACA4C,OAAM,SAAAC,GAAW,IACjBC,SAAQ,WAAQ,IAEZ,WACLX,EAAWY,OACZ,CAlBiB,CAmBnB,GAAE,CAAC7B,KAGF,4BACE,SAAC,EAAD,CAAYR,gBAAiBA,KAC7B,SAACsC,EAAA,EAAD,CAAYhD,OAAQA,MAGzB,C,+LCtCDiD,EAAAA,EAAAA,SAAAA,QAFiB,gCAIV,IAAMV,EAAW,mCAAG,oGACzBD,EADyB,EACzBA,YADyB,IAEzBpB,MAAAA,OAFyB,MAEjB,KAFiB,EAGzBiB,EAHyB,EAGzBA,WAHyB,UAKFc,EAAAA,EAAAA,GAAMX,EAAa,CACxCY,OAAQf,EAAWe,OACnBb,OAAQ,CAAEc,QAZE,mCAYgBjC,MAAAA,KAPL,cAKnBuB,EALmB,yBASlBA,EAASW,MATS,2CAAH,sDCNXV,EAAkB,SAAA1C,GAAM,OACnCA,EAAOI,KAAI,kBAAoB,CAAEC,MAAtB,EAAGA,MAA0BC,GAA7B,EAAUA,GAAV,GADwB,EAGxB+C,EAAiB,SAAC,GAUxB,IATLC,EASI,EATJA,aACAjD,EAQI,EARJA,MACAkD,EAOI,EAPJA,YACAC,EAMI,EANJA,WACAC,EAKI,EALJA,cACAnD,EAII,EAJJA,GACAoD,EAGI,EAHJA,QACAC,EAEI,EAFJA,OACAC,EACI,EADJA,SAEMC,EAAOP,EAAaQ,MAAM,KAE1BC,EAAYJ,EAAOvD,KAAI,SAAA4D,GAAK,OAAIA,EAAM3C,IAAV,IAAgB4C,KAAK,KACvD,MAAO,CACLJ,KAAMA,EAAK,GACXxD,MAAAA,EACAqD,QAAAA,EACApD,GAAAA,EACAiD,YAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAM,UAAAA,EACAH,SAAAA,EAEH,EAEYM,EAAgB,SAAAC,GAAI,OAC/BA,EAAK/D,KAAI,kBAA2D,CAClEE,GADO,EAAGA,GAEVe,KAFO,EAAOA,KAGd+C,cAHO,EAAaA,cAIpBC,UAJO,EAA4BA,UAKnCC,aALO,EAAuCA,aAAvC,GADsB,EASpBC,EAAkB,SAAAC,GAAO,OACpCA,EAAQpE,KAAI,kBAA8B,CAAEqE,OAAhC,EAAGA,OAAqCC,QAAxC,EAAWA,QAAsCpE,GAAjD,EAAoBA,GAApB,GADwB,C","sources":["components/movieList/MoviesList.jsx","components/searchForm/SearchForm.jsx","pages/Movies.jsx","services/API.js","services/funcs.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {!!movies.length &&\n        movies.map(({ title, id }) => {\n          return (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          );\n        })}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n","import { useState } from 'react';\n\nconst SearchForm = ({ setSearchParams }) => {\n  const [querySearch, setQuerySearch] = useState('');\n\n  const onHandleSubmit = e => {\n    e.preventDefault();\n    if (!querySearch.trim()) return;\n    setSearchParams({ query: querySearch.trim().toLowerCase() });\n    setQuerySearch('');\n  };\n\n  const onHandleChange = e => {\n    const { value } = e.currentTarget;\n    setQuerySearch(value);\n  };\n\n  return (\n    <form onSubmit={onHandleSubmit}>\n      <input\n        type=\"text\"\n        name=\"query\"\n        value={querySearch}\n        placeholder=\"Search movies\"\n        autoComplete=\"off\"\n        autoFocus\n        onChange={onHandleChange}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nexport default SearchForm;\n","import { useState, useEffect, useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport SearchForm from 'components/searchForm/SearchForm';\nimport MoviesList from 'components/movieList/MoviesList';\nimport { fetchMovies, normalizeMovies } from 'services';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const { query } = useMemo(\n    () => Object.fromEntries([...searchParams]),\n    [searchParams]\n  );\n\n  useEffect(() => {\n    if (!query) return;\n    const controller = new AbortController();\n    const params = {\n      controller,\n      fetchParams: 'search/movie',\n      query,\n    };\n\n    fetchMovies(params)\n      .then(response => {\n        const movies = normalizeMovies(response.results);\n        setMovies(movies);\n      })\n      .catch(error => {})\n      .finally(() => {});\n\n    return () => {\n      controller.abort();\n    };\n  }, [query]);\n\n  return (\n    <div>\n      <SearchForm setSearchParams={setSearchParams} />\n      <MoviesList movies={movies} />\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nconst API_KEY = 'c095a52b18be81f1ee1fe016a8531acc';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchMovies = async ({\n  fetchParams,\n  query = null,\n  controller,\n}) => {\n  const response = await axios(fetchParams, {\n    signal: controller.signal,\n    params: { api_key: API_KEY, query },\n  });\n  return response.data;\n};\n","export const normalizeMovies = movies =>\n  movies.map(({ title, id }) => ({ title, id }));\n\nexport const normalizeMovie = ({\n  release_date,\n  title,\n  poster_path,\n  popularity,\n  backdrop_path,\n  id,\n  tagline,\n  genres,\n  overview,\n}) => {\n  const date = release_date.split('-');\n\n  const genreList = genres.map(genre => genre.name).join(' ');\n  return {\n    date: date[0],\n    title,\n    tagline,\n    id,\n    poster_path,\n    popularity,\n    backdrop_path,\n    genreList,\n    overview,\n  };\n};\n\nexport const normalizeCast = cast =>\n  cast.map(({ id, name, original_name, character, profile_path }) => ({\n    id,\n    name,\n    original_name,\n    character,\n    profile_path,\n  }));\n\nexport const normalizeReview = reviews =>\n  reviews.map(({ author, content, id }) => ({ author, content, id }));\n"],"names":["movies","location","useLocation","length","map","title","id","to","state","from","setSearchParams","useState","querySearch","setQuerySearch","onSubmit","e","preventDefault","trim","query","toLowerCase","type","name","value","placeholder","autoComplete","autoFocus","onChange","currentTarget","setMovies","useSearchParams","searchParams","useMemo","Object","fromEntries","useEffect","controller","AbortController","params","fetchParams","fetchMovies","then","response","normalizeMovies","results","catch","error","finally","abort","MoviesList","axios","signal","api_key","data","normalizeMovie","release_date","poster_path","popularity","backdrop_path","tagline","genres","overview","date","split","genreList","genre","join","normalizeCast","cast","original_name","character","profile_path","normalizeReview","reviews","author","content"],"sourceRoot":""}